
.. summary Cyclus Environment description

The Cyclus Environment
======================

At its heart, the Cyclus environment is an agent-based modeling tool
with a small number of key components.

 * Facility agents send Messages to Market agents
 * Market agents issues Transactions to Facility agents to exchange Resources
 * Facility agents are owned by Institution agents
 * Institution agents operate in geo-political Region agents

To achieve maximum flexibility, only the minimum necessary behavior of
any agent is defined by the Cyclus core.  The detailed behavior of all
agents is free to be defined by user/developers by defining concrete
implementations of the agents in modules that are included at runtime.
The following Model classes are available for extension:

 * MarketModel provides the basis for Market agents.  These agents
   collects offers and requests from Facility agents in the form of
   Messages and use some algorithm to reconcile these and issue
   Transactions to those Facility agents
 * FacilityModel provides the basis for Facility agents.  These agents
   send offers and/or requests to Market agents via their Insitution
   agent owners and Region agent geo-political regions.
 * InstModel provides the basis for Institution agents.  These agents
   deploy Facility agents based on instructions from the Region agent
   in which they operate, and collect offers/requests from those
   Facility agents and send them on to the Market agents via their
   Region agent.
 * RegionModel provides the basis for Region agents. These agents
   issue instructions to Institution agents to build Facility agents
   to satisfy some demand for the products of those Facility agents.

A number of core utilities are provided to manage the simulation:

 * XML-based validated input is available using the RelaxNG schema
   defintion syntax in the InputXML class
 * SQL-based output is available for logging transactions and other
   core data in the BookKeeper class
 * The progression of the simulation through time is managed by the
   Timer class
 * A consistent set of software exceptions is provided by the
   CycException class
 * Standard output and error output are managed by the Logger class

Some standardized instance of Resources are available for use by
module developers

 * Since most fuel cycle simulations center around Resources that are
   mixtures of isotopes, the Material class provides a standard
   representation of these
 * Radioactive decay necessary for these Materials is provided by the
   DecayHandler class

A number of other building blocks are available to assist module developers
while providing some uniformity of implementation of frequently used
concepts:

 * A ResourceBuffer class provides a common way for Facility agents to
   implement inventories of Resources

